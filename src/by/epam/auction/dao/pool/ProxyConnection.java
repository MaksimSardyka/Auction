package by.epam.auction.dao.pool;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * {@code ProxyConnection} wraps {@link java.sql.Connection}. It implements
 * {@link AutoCloseable} and contains the overridden implemented method close().
 */
public class ProxyConnection implements AutoCloseable {

    /**
     * Connection.
     */
    private Connection connection;

    /**
     * The Constant LOG.
     */
    private static final Logger LOG = LogManager.getLogger();

    /**
     * Instantiate a new proxy connection.
     *
     * @param url
     *            URL
     * @param login
     *            login
     * @param password
     *            password
     * @throws SQLException
     *             SQL exception
     */
    ProxyConnection(String url, String login, String password)
            throws SQLException {
        connection = DriverManager.getConnection(url, login, password);
        connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
    }

    /**
     * Getter on connection.
     *
     * @return this Connection
     */
    public Connection getConnection() {
        return connection;
    }

    /**
     * Getter on auto commit.
     *
     * @return Auto commit
     * @throws SQLException
     *             SQL exception
     */
    boolean getAutoCommit() throws SQLException {
        return connection.getAutoCommit();
    }

    /**
     * Setter for auto commit.
     *
     * @param autoCommit
     *            New auto commit value
     * @throws SQLException
     *             SQL exception
     */
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        connection.setAutoCommit(autoCommit);
    }

    /**
     * Creates the statement.
     *
     * @return Statement
     * @throws SQLException
     *             SQL exception
     */
    public Statement createStatement() throws SQLException {
        if (connection != null) {
            Statement statement = connection.createStatement();
            if (statement != null) {
                return statement;
            }
        }
        throw new SQLException("Connection or statement is null.");
    }

    /**
     * Close statement.
     *
     * @param statement
     *            Statement to close.
     */
    public void closeStatement(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                LOG.log(Level.ERROR, "SQLEx.: " + e);
            }
        }
    }

    /**
     * The method destroys the connection, it calls the method close() of the
     * wrapped connection.
     *
     * @throws SQLException
     *             SQL exception
     */
    protected void destroy() throws SQLException {
        if (connection != null) {
            connection.close();
        }
    }

    /**
     * The method checks connection.
     *
     * @param timeout
     *            Timeout
     * @return true, if successful
     * @throws SQLException
     *             SQL exception
     */
    public boolean check(int timeout) throws SQLException {
        return (connection != null && !connection.isClosed()
                && connection.isValid(timeout));
    }

    /**
     * Prepare statement.
     *
     * @param sql
     *            SQL
     * @return the prepared statement
     * @throws SQLException
     *             SQL exception
     */
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    /**
     * Prepare statement.
     *
     * @param sql
     *            SQL
     * @param autoGeneratedKeys
     *            the auto generated keys
     * @return the prepared statement
     * @throws SQLException
     *             the SQL exception
     */
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    /**
     * Prepare call.
     *
     * @param sql
     *            the sql
     * @return the callable statement
     * @throws SQLException
     *             the SQL exception
     */
    public CallableStatement prepareCall(String sql) throws SQLException {
        return connection.prepareCall(sql);
    }

    /**
     * Commit.
     *
     * @throws SQLException
     *             the SQL exception
     */
    public void commit() throws SQLException {
        connection.commit();
    }

    /**
     * Rollback.
     *
     * @throws SQLException
     *             the SQL exception
     */
    public void rollback() throws SQLException {
        connection.rollback();
    }

    /**
     * The overridden implemented method, it releases connection into the
     * connection pool.
     * 
     * @see java.lang.AutoCloseable#close()
     */
    @Override
    public void close() {
        ConnectionPool.getInstance().releaseConnection(this);
    }

}
